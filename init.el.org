* init.el
** Package Sources
#+begin_src emacs-lisp
  (setq package-archives
        '(("elpa" . "http://tromey.com/elpa/")
          ("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))
#+end_src
** Scroll, tool and menu bar.

   Hide scroll bar.

#+begin_src emacs-lisp
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src

   Hide tool bar.

#+begin_src emacs-lisp
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+end_src

   Hide menu bar.

#+begin_src emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

** Transparency
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 50))
  (add-to-list 'default-frame-alist '(alpha 85 50))
#+end_src

** Custom

   Set location of custom file.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
#+end_src

   Load custom file.

#+begin_src emacs-lisp
  (load custom-file)
#+end_src

** Faces
*** Cursor

#+begin_src emacs-lisp
  (custom-set-faces
   '(cursor ((t (:background "orange red" :foreground "white")))))
#+end_src

*** Magit

#+begin_src emacs-lisp
  (custom-set-faces
   '(magit-section-title ((t (:underline t)))))
#+end_src

*** Mode Line

#+begin_src emacs-lisp
  (custom-set-faces
   '(mode-line ((t (:background "white smoke" :foreground "black"))))
   '(mode-line-inactive ((t (:background "dark gray" :foreground "black")))))
#+end_src

*** Vertical Border

#+begin_src emacs-lisp
  (custom-set-faces
   '(vertical-border ((t (:foreground "black")))))
#+end_src
** Cask
#+begin_src emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
  (require 'pallet)
#+end_src
** el-get

   Add el-get to load path.

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
#+end_src

   Require el-get master branch.

#+begin_src emacs-lisp
  (unless (require 'el-get nil 'noerror)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
      (let (el-get-master-branch)
        (goto-char (point-max))
        (eval-print-last-sexp))))
#+end_src

   Define where to look for init-pkgname.el configurations. Disabled if nil.

#+begin_src emacs-lisp
  (setq el-get-user-package-directory "~/.emacs.d/el-get-init-files")
#+end_src

   Additional package recipes.

#+begin_src emacs-lisp
  (setq el-get-sources
        '(el-get
          (:name emacs-color-theme-solarized-r0man
                 :type github
                 :pkgname "r0man/emacs-color-theme-solarized"
                 :description "Emacs highlighting using Ethan Schoonoverâ€™s Solarized color scheme "
                 :prepare (add-to-list 'custom-theme-load-path default-directory))
          (:name inflect
                 :type github
                 :pkgname "r0man/inflect-el"
                 :description "Emacs Lisp Inflection Library."
                 :compile ("inflect.el"))
          (:name emacs-request
                 :type github
                 :pkgname "tkf/emacs-request"
                 :description "Easy HTTP request for Emacs Lisp"
                 :load "request.el"
                 :compile ("request.el"))
          (:name jss
                 :type github
                 :pkgname "segv/jss"
                 :depends websocket
                 :description "jsSlime - An emacs toolkit for developing and debugging in-browser javascript code "
                 :load "jss.el"
                 :compile ("jss.el" "jss-browser-webkit.el"))
          (:name macrostep
                 :type github
                 :pkgname "joddie/macrostep"
                 :description "Elisp macro stepper"
                 :compile ("macrostep.el"))
          (:name slamhound
                 :type github
                 :pkgname "technomancy/slamhound"
                 :description "Slamhound rips your namespace form apart and reconstructs it."
                 :compile ("slamhound.el"))))
#+end_src

   Load el-get packages

#+begin_src emacs-lisp
  (el-get
   'sync
   'ace-jump-mode
   'ack-and-a-half
   'cider
   'clojure-mode
   'clj-refactor
   'dired-toggle-sudo
   'elisp-slime-nav
   'elnode
   'emacs-color-theme-solarized-r0man
   'emacs-request
   'emms
   'expand-region
   'find-file-in-project
   'flx
   'gnus-notify
   'haskell-mode
   'haskell-mode-exts
   'highlight-cl
   'hive
   'ido-vertical-mode
   'inflect
   'js2-mode
   'jss
   'macrostep
   'magit
   'markdown-mode
   'multi-term
   'multiple-cursors
   'paredit
   'popwin
   'pretty-lambdada
   'projectile
   'ruby-mode
   'ruby-test-mode
   'rvm
   'scss-mode
   'slamhound
   'smex
   'smooth-scrolling
   'vertica
   'web-mode
   'websocket
   'yasnippet)
#+end_src

** Compass

#+begin_src emacs-lisp
  (defun compass-watch ()
    "Find the project root and run compass watch."
    (interactive)
    (let ((directory (locate-dominating-file (expand-file-name (directory-file-name ".")) "config.rb"))
          (compilation-ask-about-save nil)
          (compilation-buffer-name-function (lambda (mode) "*compass*")))
      (if directory
          (compile (message (format "cd %s; compass watch" directory)))
        (message "Can't find compass project root."))))
#+end_src

** Company mode

   Nicer faces

#+begin_src emacs-lisp
  (custom-set-faces
   '(company-preview
     ((t (:foreground "darkgray" :underline t))))
   '(company-preview-common
     ((t (:inherit company-preview))))
   '(company-tooltip
     ((t (:background "lightgray" :foreground "black"))))
   '(company-tooltip-selection
     ((t (:background "steelblue" :foreground "white"))))
   '(company-tooltip-common
     ((((type x)) (:inherit company-tooltip :weight bold))
      (t (:inherit company-tooltip))))
   '(company-tooltip-common-selection
     ((((type x)) (:inherit company-tooltip-selection :weight bold))
      (t (:inherit company-tooltip-selection))))
   '(company-scrollbar-fg
     ((t (:background "black"))))
   '(company-scrollbar-bg
     ((t (:background "darkgray")))))
#+end_src

   Indent with TAB, then do completion.

#+begin_src emacs-lisp
  (defun indent-or-complete ()
    "Indent or complete via company-mode."
    (interactive)
    (if (looking-at "\\_>")
        (company-complete-common)
      (indent-according-to-mode)))

  (global-set-key (kbd "TAB") 'indent-or-complete)
#+end_src

   Enable company mode in all buffers.

#+begin_src emacs-lisp
  (global-company-mode)
#+end_src

** Functions

   Indent the whole buffer.

#+begin_src emacs-lisp
  (defun indent-buffer ()
    "Indent the whole buffer."
    (interactive)
    (indent-region (point-min) (point-max)))
#+end_src

   Remove all tabs from the current buffer.

#+begin_src emacs-lisp
  (defun untabify-buffer ()
    "Remove all tabs from the current buffer."
    (interactive)
    (untabify (point-min) (point-max)))
#+end_src

   Cleanup the current buffer.

#+begin_src emacs-lisp
  (defun cleanup-buffer ()
    "Cleanup the current buffer."
    (interactive)
    (indent-buffer)
    (delete-trailing-whitespace))
#+end_src

   Find file as root.

#+begin_src emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

   Swap two buffers.

#+begin_src emacs-lisp
  (defun swap-buffers ()
    "Swap your buffers."
    (interactive)
    (cond ((not (> (count-windows)1))
           (message "You can't rotate a single window!"))
          (t
           (setq i 1)
           (setq numWindows (count-windows))
           (while  (< i numWindows)
             (let* ((w1 (elt (window-list) i))
                    (w2 (elt (window-list) (+ (% i numWindows) 1)))
                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))
                    (s1 (window-start w1))
                    (s2 (window-start w2)))
               (set-window-buffer w1  b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1)
               (setq i (1+ i)))))))
#+end_src

   Rotate two buffers.

#+begin_src emacs-lisp
  (defun rotate-buffers ()
    "Rotate your buffers."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+end_src

   Show the face found at the current point.

#+begin_src emacs-lisp
  (defun what-face (pos)
    "Show the face found at the current point."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+end_src

   Reload the ~/.Xresources configuration.

#+begin_src emacs-lisp
  (defun xresources ()
    "Reload the ~/.Xresources configuration."
    (interactive)
    (shell-command "xrdb -merge ~/.Xresources ")
    (message "X resources reloaded."))
#+end_src

** Configure the full name of the user logged in.
#+begin_src emacs-lisp
  (setq user-full-name "Roman Scherer")
#+end_src
** Global auto revert mode

   Reload files when they change on disk.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
#+end_src

** Backup

   Put all backup files in a separate directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

   Make backups for files under version control as well.

#+begin_src emacs-lisp
  (setq vc-make-backup-files t)
#+end_src

   If t, delete excess backup versions silently.

#+begin_src emacs-lisp
  (setq delete-old-versions t)
#+end_src

   Number of newest versions to keep when a new numbered backup is made.

#+begin_src emacs-lisp
  (setq kept-new-versions 6)
#+end_src

   Number of oldest versions to keep when a new numbered backup is made.

#+begin_src emacs-lisp
  (setq kept-old-versions 2)
#+end_src

   Make numeric backup versions unconditionally.

#+begin_src emacs-lisp
  (setq version-control t)
#+end_src

** Misc

   Answer questions with "y" or "n"..

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

   Highlight matching parentheses when the point is on them.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

   Enter debugger if an error is signaled?

#+begin_src emacs-lisp
  (setq debug-on-error nil)
#+end_src

   Don't show startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

   Delete trailing whitespace when saving.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

   Toggle column number display in the mode line.

#+begin_src emacs-lisp
  (column-number-mode)
#+end_src

   Enable display of time, load level, and mail flag in mode lines.

#+begin_src emacs-lisp
  (display-time)
#+end_src

   Whether to add a newline automatically at the end of the file.

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

   Highlight trailing whitespace.

#+begin_src emacs-lisp
  (setq show-trailing-whitespace t)
#+end_src

   Controls the operation of the TAB key.

#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)
#+end_src

   The maximum size in lines for term buffers.

#+begin_src emacs-lisp
  (setq term-buffer-maximum-size (* 10 2048))
#+end_src

   Use Chromium as default browser.

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'browse-url-chromium)
#+end_src

   Clickable URLs.

#+begin_src emacs-lisp
  (define-globalized-minor-mode global-goto-address-mode goto-address-mode goto-address-mode)
  (global-goto-address-mode)
#+end_src

** Mac OSX

   This variable describes the behavior of the command key.

#+begin_src emacs-lisp
  (setq mac-option-key-is-meta t)
  (setq mac-right-option-modifier nil)
#+end_src

** Abbrev mode

   Set the name of file from which to read abbrevs.

#+begin_src emacs-lisp
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
#+end_src

   Silently save word abbrevs too when files are saved.

#+begin_src emacs-lisp
  (setq save-abbrevs 'silently)
#+end_src

** Compilation mode

   Auto scroll compilation buffer.

#+begin_src emacs-lisp
  (setq compilation-scroll-output 't)
#+end_src

   Enable colors in compilation mode.
   http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer

#+begin_src emacs-lisp
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region (point-min) (point-max))
    (toggle-read-only))

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src

** Leiningen

   Auto compile ClojureScript.

#+begin_src emacs-lisp
  (defun lein-cljsbuild ()
    (interactive)
    (compile "lein clean; lein cljsbuild auto"))
#+end_src

   Start a Rhino REPL.

#+begin_src emacs-lisp
  (defun lein-rhino-repl ()
    "Start a Rhino repl via Leiningen."
    (interactive)
    (run-lisp "lein trampoline cljsbuild repl-rhino"))
#+end_src

   Start a Node.js REPL.

#+begin_src emacs-lisp
  (defun lein-node-repl ()
    "Start a NodeJS repl via Leiningen."
    (interactive)
    (run-lisp "lein trampoline noderepl"))
#+end_src

** CSS mode
#+begin_src emacs-lisp
  (setq css-indent-offset 2)
#+end_src
** SCSS mode
#+begin_src emacs-lisp
  (setq scss-compile-at-save nil)
#+end_src
** Desktop save mode

   Always save desktop.

#+begin_src emacs-lisp
  (setq desktop-save t)
#+end_src

   Load desktop even if it is locked.

#+begin_src emacs-lisp
  (setq desktop-load-locked-desktop t)
#+end_src

   Enable desktop save mode.

#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src

** Inferior Lisp mode

   Use Steel Bank Common Lisp (SBCL) as inferior-lisp-program.

#+begin_src emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+end_src

** Dired mode

   Switches passed to `ls' for Dired. MUST contain the `l' option.

#+begin_src emacs-lisp
  (setq dired-listing-switches "-alh")
#+end_src

   Try to guess a default target directory.

#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

   Find Clojure files in dired mode.

#+begin_src emacs-lisp
  (defun find-dired-clojure (dir)
    "Run find-dired on Clojure files."
    (interactive (list (read-directory-name "Run find (Clojure) in directory: " nil "" t)))
    (find-dired dir "-name \"*.clj\""))
#+end_src

   Find Ruby files in dired mode.

#+begin_src emacs-lisp
  (defun find-dired-ruby (dir)
    "Run find-dired on Ruby files."
    (interactive (list (read-directory-name "Run find (Ruby) in directory: " nil "" t)))
    (find-dired dir "-name \"*.rb\""))
#+end_src

** Dired-x mode

   User-defined alist of rules for suggested commands.

#+begin_src emacs-lisp
  (setq dired-guess-shell-alist-user
        '(("\\.pdf$" "evince")
          ("\\.xlsx?$" "libreoffice")))
#+end_src

   Run shell command in background.

#+begin_src emacs-lisp
  (defun dired-do-shell-command-in-background (command)
    "In dired, do shell command in background on the file or directory named on
   this line."
    (interactive
     (list (dired-read-shell-command (concat "& on " "%s: ") nil (list (dired-get-filename)))))
    (call-process command nil 0 nil (dired-get-filename)))

  (add-hook 'dired-load-hook
            (lambda ()
              (load "dired-x")
              (define-key dired-mode-map "&" 'dired-do-shell-command-in-background)))
#+end_src

** Electric pair mode
#+begin_src emacs-lisp
  (electric-pair-mode t)
#+end_src
** Emacs Lisp mode

   Unequivocally turn on ElDoc mode.

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+end_src

   Enable Slime-style navigation of elisp symbols using M-. and M-,

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
#+end_src

   Auto load files.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
#+end_src

** Emacs server

   Start the Emacs server if it's not running.

#+begin_src emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+end_src

** Fly Spell mode

   Enable flyspell in text mode.

#+begin_src emacs-lisp

  (defun enable-flyspell-mode ()
    "Enable Flyspell mode."
    (flyspell-mode 1))

  (dolist (hook '(text-mode-hook))
    (add-hook hook 'enable-flyspell-mode))

#+end_src

   Enable flyspell in programming mode.

#+begin_src emacs-lisp

  (defun enable-flyspell-prog-mode ()
    "Enable Flyspell Programming mode."
    (flyspell-prog-mode))

  (dolist (hook '(prog-mode-hook))
    (add-hook hook 'enable-flyspell-prog-mode))

#+end_src

** Gnus
#+begin_src emacs-lisp
  (setq gnus-init-file "~/.emacs.d/gnus.el")
#+end_src
** Ido mode

#+begin_src emacs-lisp
  (setq ido-auto-merge-work-directories-length nil)
#+end_src

   Always create new buffer if no buffer matches substring.

#+begin_src emacs-lisp
  (setq ido-create-new-buffer 'always)
#+end_src

   Enable flexible string matching.

#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t)
#+end_src

#+begin_src emacs-lisp
  (setq ido-enable-prefix nil)
#+end_src

#+begin_src emacs-lisp
  (setq ido-handle-duplicate-virtual-buffers 2)
#+end_src

#+begin_src emacs-lisp
  (setq ido-max-prospects 10)
#+end_src

#+begin_src emacs-lisp
  (setq ido-use-filename-at-point 'guess)
#+end_src

#+begin_src emacs-lisp
  (setq ido-use-virtual-buffers t)
#+end_src

   Enable IDO mode.

#+begin_src emacs-lisp
  (ido-mode t)
#+end_src

** Java

   Indent Java annotations. See http://lists.gnu.org/archive/html/help-gnu-emacs/2011-04/msg00262.html

#+begin_src emacs-lisp
  (add-hook
   'java-mode-hook
   '(lambda ()
      (setq c-comment-start-regexp "\\(@\\|/\\(/\\|[*][*]?\\)\\)")
      (modify-syntax-entry ?@ "< b" java-mode-syntax-table)))
#+end_src

** Octave

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
#+end_src

** IRC
#+begin_src emacs-lisp
  (if (file-exists-p "~/.rcirc.el") (load-file "~/.rcirc.el"))

  (setq rcirc-default-nick "r0man"
        rcirc-default-user-name "r0man"
        rcirc-default-full-name "Roman Scherer"
        rcirc-server-alist '(("irc.freenode.net" :channels ("#clojure")))
        rcirc-private-chat t
        rcirc-debug-flag t)

  (add-hook 'rcirc-mode-hook
            (lambda ()
              (set (make-local-variable 'scroll-conservatively) 8192)
              (rcirc-track-minor-mode 1)
              (flyspell-mode 1)))
#+end_src

** Mail

   Load smtpmail

#+begin_src emacs-lisp
  (require 'smtpmail)
#+end_src

   Send mail via smtpmail.

#+begin_src emacs-lisp
  (setq send-mail-function 'sendmail-send-it)
#+end_src

   Whether to print info in debug buffer.

#+begin_src emacs-lisp
  (setq smtpmail-debug-info t)
#+end_src

   The name of the host running SMTP server.

#+begin_src emacs-lisp
  (setq smtpmail-smtp-server "smtp.googlemail.com")
#+end_src

   SMTP service port number.

#+begin_src emacs-lisp
  (setq smtpmail-smtp-service 465)
#+end_src

** Fuck the NSA

   http://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Amusements.html

#+begin_src emacs-lisp
  (setq mail-signature
        '(progn
           (goto-char (point-max))
           (insert "\n\n--------------------------------------------------------------------------------")
           (spook)))
#+end_src
** Save hist mode

   Save the mini buffer history.

#+begin_src emacs-lisp
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
#+end_src

** SQL mode
#+begin_src emacs-lisp
  (setq sql-indent-offset 2)
  (eval-after-load "sql"
    '(progn
       (let ((filename "~/.sql.el"))
         (when (file-exists-p filename)
           (load-file filename)))))
#+end_src

** Tramp
#+begin_src emacs-lisp
  (eval-after-load "tramp"
    '(progn
       (tramp-set-completion-function
        "ssh"
        '((tramp-parse-shosts "~/.ssh/known_hosts")
          (tramp-parse-hosts "/etc/hosts")))))
#+end_src

** Uniquify
#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-separator "|")
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-after-kill-buffer-p t)
#+end_src

** Org mode

   Configure active languages for Babel.

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (clojure . t)
     (emacs-lisp . t)
     (ruby . t)
     (sh . t)
     (sql . t)))
#+end_src

   Fontify org mode code blocks.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

** Winner mode
#+begin_src emacs-lisp
  (winner-mode)
#+end_src

** After init hook
#+begin_src emacs-lisp

  (add-hook
   'after-init-hook
   (lambda ()

     ;; Load system specific config.
     (let ((system-config (concat user-emacs-directory system-name ".el")))
       (when (file-exists-p system-config)
         (load system-config)))

     (require 'emms-setup)
     (emms-all)
     (emms-default-players)

     (add-to-list 'emms-player-list 'emms-player-mpd)
     (condition-case nil
         (emms-player-mpd-connect)
       (error (message "Can't connect to music player daemon.")))

     (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
     (setq emms-player-mpd-music-directory (expand-file-name "~/Music"))

     (let ((filename "~/.emms.el"))
       (when (file-exists-p filename)
         (load-file filename)))

     (add-to-list 'emms-stream-default-list
                  '("SomaFM: Space Station" "http://www.somafm.com/spacestation.pls" 1 streamlist))

     ;; Start a terminal.
     (multi-term)

     ;; Load keyboard bindings.
     (global-set-key (kbd "C-c ,") 'ruby-test-run)
     (global-set-key (kbd "C-c C-+") 'er/expand-region)
     (global-set-key (kbd "C-c C--") 'er/contract-region)
     (global-set-key (kbd "C-c C-.") 'clojure-test-run-test)
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
     (global-set-key (kbd "C-c M-,") 'ruby-test-run-at-point)
     (global-set-key (kbd "C-c SPC") 'ace-jump-mode)
     (global-set-key (kbd "C-c n") 'cleanup-buffer)
     (global-set-key (kbd "C-x C-g b") 'mo-git-blame-current)
     (global-set-key (kbd "C-x C-d") 'dired)
     (global-set-key (kbd "C-x C-o") 'delete-blank-lines)
     (global-set-key (kbd "C-x TAB") 'indent-rigidly)
     (global-set-key (kbd "C-x ^") 'enlarge-window)
     (global-set-key (kbd "C-x C-f") 'projectile-find-file)
     (global-set-key (kbd "C-x f") 'ido-find-file)
     (global-set-key (kbd "C-x h") 'mark-whole-buffer)
     (global-set-key (kbd "C-c r") 'rotate-buffers)

     (let ((mode emacs-lisp-mode-map))
       (define-key mode (kbd "C-c m") 'macrostep-expand)
       (define-key mode (kbd "C-c e E") 'elint-current-buffer)
       (define-key mode (kbd "C-c e c") 'cancel-debug-on-entry)
       (define-key mode (kbd "C-c e d") 'debug-on-entry)
       (define-key mode (kbd "C-c e e") 'toggle-debug-on-error)
       (define-key mode (kbd "C-c e f") 'emacs-lisp-byte-compile-and-load)
       (define-key mode (kbd "C-c e l") 'find-library)
       (define-key mode (kbd "C-c e r") 'eval-region)
       (define-key mode (kbd "C-c C-k") 'eval-buffer)
       (define-key mode (kbd "C-c ,") 'ert)
       (define-key mode (kbd "C-c C-,") 'ert))

     (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
     (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)))
#+end_src
