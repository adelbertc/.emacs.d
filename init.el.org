* init.el
** Package Sources
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("elpa" . "http://tromey.com/elpa/")
          ("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC
** Scroll, tool and menu bar.

   Hide scroll bar.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

   Hide tool bar.

#+BEGIN_SRC emacs-lisp
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
#+END_SRC

   Hide menu bar.

#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+END_SRC

** Transparency
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(85 50))
  (add-to-list 'default-frame-alist '(alpha 85 50))
#+END_SRC
** Custom

   Set location of custom file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "~/.emacs.d/custom.el"))
#+END_SRC

   Load custom file.

#+BEGIN_SRC emacs-lisp
  (load custom-file)
#+END_SRC

** Cask
#+BEGIN_SRC emacs-lisp
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
  (require 'pallet)
#+END_SRC
** Use package

   Load and configure packages with [[https://github.com/jwiegley/use-package][use-package]].

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

   Report about loading and configuration details.

#+BEGIN_SRC emacs-lisp
  (setq use-package-verbose t)
#+END_SRC

** Color theme
#+BEGIN_SRC emacs-lisp
  (use-package color-theme
    :init
    (progn
      (add-to-list 'load-path "~/workspace/emacs-color-theme-solarized")
      (require 'color-theme-solarized)
      (load-theme 'solarized-dark t)))
#+END_SRC
** Ace jump mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :bind ("C-c SPC" . ace-jump-mode))
#+END_SRC
** Auto dictionary mode
#+BEGIN_SRC emacs-lisp
  (use-package auto-dictionary
    :init (add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1))))
#+END_SRC
** Compass

#+BEGIN_SRC emacs-lisp
  (defun compass-watch ()
    "Find the project root and run compass watch."
    (interactive)
    (let ((directory (locate-dominating-file (expand-file-name (directory-file-name ".")) "config.rb"))
          (compilation-ask-about-save nil)
          (compilation-buffer-name-function (lambda (mode) "*compass*")))
      (if directory
          (compile (message (format "cd %s; compass watch" directory)))
        (message "Can't find compass project root."))))
#+END_SRC

** Company mode

   Enable company mode.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind ("TAB" . indent-or-complete)
    :init (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

   Indent with TAB, then do completion.

#+BEGIN_SRC emacs-lisp
  (defun indent-or-complete ()
    "Indent or complete via company-mode."
    (interactive)
    (if (looking-at "\\_>")
        (company-complete-common)
      (indent-according-to-mode)))
#+END_SRC

** Functions

   Indent the whole buffer.

#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    "Indent the whole buffer."
    (interactive)
    (indent-region (point-min) (point-max)))
#+END_SRC

   Remove all tabs from the current buffer.

#+BEGIN_SRC emacs-lisp
  (defun untabify-buffer ()
    "Remove all tabs from the current buffer."
    (interactive)
    (untabify (point-min) (point-max)))
#+END_SRC

   Cleanup the current buffer.

#+BEGIN_SRC emacs-lisp
  (defun cleanup-buffer ()
    "Cleanup the current buffer."
    (interactive)
    (indent-buffer)
    (delete-trailing-whitespace))
#+END_SRC

   Find file as root.

#+BEGIN_SRC emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

   Swap two buffers.

#+BEGIN_SRC emacs-lisp
  (defun swap-buffers ()
    "Swap your buffers."
    (interactive)
    (cond ((not (> (count-windows)1))
           (message "You can't rotate a single window!"))
          (t
           (setq i 1)
           (setq numWindows (count-windows))
           (while  (< i numWindows)
             (let* ((w1 (elt (window-list) i))
                    (w2 (elt (window-list) (+ (% i numWindows) 1)))
                    (b1 (window-buffer w1))
                    (b2 (window-buffer w2))
                    (s1 (window-start w1))
                    (s2 (window-start w2)))
               (set-window-buffer w1  b2)
               (set-window-buffer w2 b1)
               (set-window-start w1 s2)
               (set-window-start w2 s1)
               (setq i (1+ i)))))))
#+END_SRC

   Rotate two buffers.

#+BEGIN_SRC emacs-lisp
  (defun rotate-buffers ()
    "Rotate your buffers."
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC

   Show the face found at the current point.

#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    "Show the face found at the current point."
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC

   Reload the ~/.Xresources configuration.

#+BEGIN_SRC emacs-lisp
  (defun xresources ()
    "Reload the ~/.Xresources configuration."
    (interactive)
    (shell-command "xrdb -merge ~/.Xresources ")
    (message "X resources reloaded."))
#+END_SRC

** Configure the full name of the user logged in.
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Roman Scherer")
#+END_SRC
** Global auto revert mode

   Reload files when they change on disk.

#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode 1)
#+END_SRC

** Backup

   Put all backup files in a separate directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

   Copy all files, don't rename them.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
#+END_SRC

   Make backups for files under version control as well.

#+BEGIN_SRC emacs-lisp
  (setq vc-make-backup-files t)
#+END_SRC

   If t, delete excess backup versions silently.

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions t)
#+END_SRC

   Number of newest versions to keep when a new numbered backup is made.

#+BEGIN_SRC emacs-lisp
  (setq kept-new-versions 10)
#+END_SRC

   Number of oldest versions to keep when a new numbered backup is made.

#+BEGIN_SRC emacs-lisp
  (setq kept-old-versions 0)
#+END_SRC

   Make numeric backup versions unconditionally.

#+BEGIN_SRC emacs-lisp
  (setq version-control t)
#+END_SRC

** Misc

   Answer questions with "y" or "n".

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

   Highlight matching parentheses when the point is on them.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

   Enter debugger if an error is signaled?

#+BEGIN_SRC emacs-lisp
  (setq debug-on-error nil)
#+END_SRC

   Don't show startup message.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

   Delete trailing whitespace when saving.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

   Toggle column number display in the mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode)
#+END_SRC

   Enable display of time, load level, and mail flag in mode lines.

#+BEGIN_SRC emacs-lisp
  (display-time)
#+END_SRC

   Whether to add a newline automatically at the end of the file.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

   Highlight trailing whitespace.

#+BEGIN_SRC emacs-lisp
  (setq show-trailing-whitespace t)
#+END_SRC

   Controls the operation of the TAB key.

#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

   The maximum size in lines for term buffers.

#+BEGIN_SRC emacs-lisp
  (setq term-buffer-maximum-size (* 10 2048))
#+END_SRC

   Use Chromium as default browser.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-chromium)
#+END_SRC

   Clickable URLs.

#+BEGIN_SRC emacs-lisp
  (define-globalized-minor-mode global-goto-address-mode goto-address-mode goto-address-mode)
  (global-goto-address-mode)
#+END_SRC

** Mac OSX

   This variable describes the behavior of the command key.

#+BEGIN_SRC emacs-lisp
  (setq mac-option-key-is-meta t)
  (setq mac-right-option-modifier nil)
#+END_SRC

** Abbrev mode

   Set the name of file from which to read abbrevs.

#+BEGIN_SRC emacs-lisp
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
#+END_SRC

   Silently save word abbrevs too when files are saved.

#+BEGIN_SRC emacs-lisp
  (setq save-abbrevs 'silently)
#+END_SRC

** Compilation mode

   Auto scroll compilation buffer.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 't)
#+END_SRC

   Enable colors in compilation mode.
   http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer

#+BEGIN_SRC emacs-lisp
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region (point-min) (point-max))
    (toggle-read-only))

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+END_SRC

** Leiningen

   Auto compile ClojureScript.

#+BEGIN_SRC emacs-lisp
  (defun lein-cljsbuild ()
    (interactive)
    (compile "lein clean; lein cljsbuild auto"))
#+END_SRC

   Start a Rhino REPL.

#+BEGIN_SRC emacs-lisp
  (defun lein-rhino-repl ()
    "Start a Rhino repl via Leiningen."
    (interactive)
    (run-lisp "lein trampoline cljsbuild repl-rhino"))
#+END_SRC

   Start a Node.js REPL.

#+BEGIN_SRC emacs-lisp
  (defun lein-node-repl ()
    "Start a NodeJS repl via Leiningen."
    (interactive)
    (run-lisp "lein trampoline noderepl"))
#+END_SRC

** CSS mode
#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :mode ("\\.css\\'" . css-mode)
    :init (setq css-indent-offset 2))
#+END_SRC
** SCSS mode
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :init (setq scss-compile-at-save nil))
#+END_SRC
** Desktop save mode

   Always save desktop.

#+BEGIN_SRC emacs-lisp
  (setq desktop-save t)
#+END_SRC

   Load desktop even if it is locked.

#+BEGIN_SRC emacs-lisp
  (setq desktop-load-locked-desktop t)
#+END_SRC

   Enable desktop save mode.

#+BEGIN_SRC emacs-lisp
  (desktop-save-mode 1)
#+END_SRC

** Inferior Lisp mode

   Use Steel Bank Common Lisp (SBCL) as inferior-lisp-program.

#+BEGIN_SRC emacs-lisp
  (setq inferior-lisp-program "sbcl")
#+END_SRC

** Cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :init
    (progn
      ;; Enable eldoc in Clojure buffers
      (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

      ;; Hide *nrepl-connection* and *nrepl-server* buffers from appearing
      ;; in some buffer switching commands like switch-to-buffer
      (setq nrepl-hide-special-buffers nil)

      ;; Enabling CamelCase support for editing commands(like forward-word,
      ;; backward-word, etc) in the REPL is quite useful since we often have
      ;; to deal with Java class and method names. The built-in Emacs minor
      ;; mode subword-mode provides such functionality
      (add-hook 'cider-repl-mode-hook 'subword-mode)

      ;; The use of paredit when editing Clojure (or any other Lisp) code is
      ;; highly recommended. You're probably using it already in your
      ;; clojure-mode buffers (if you're not you probably should). You might
      ;; also want to enable paredit in the REPL buffer as well.
      (add-hook 'cider-repl-mode-hook 'paredit-mode)

      ;; Auto-select the error buffer when it's displayed:
      (setq cider-auto-select-error-buffer t)

      ;; Controls whether to pop to the REPL buffer on connect.
      (setq cider-repl-pop-to-buffer-on-connect nil)

      ;; Controls whether to auto-select the error popup buffer.
      (setq cider-auto-select-error-buffer t)

      ;; T to wrap history around when the end is reached.
      (setq cider-repl-wrap-history t)

      (defun cider-namespace-refresh ()
        (interactive)
        (cider-interactive-eval
         "(require 'clojure.tools.namespace.repl)
      (clojure.tools.namespace.repl/refresh)"))

      (defun piggiepack-repl ()
        (interactive)
        ;; (cider-jack-in)
        (cider-interactive-eval
         "(require 'cljs.repl.browser)
          (cemerick.piggieback/cljs-repl :repl-env (cljs.repl.browser/repl-env :port 9000))"))

      (defun node-repl ()
        (interactive)
        (cider-interactive-eval
         "(require '[cljs.repl.node :as node])
          (node/run-node-nrepl)"))))
#+END_SRC
** Clojure mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :mode (("\\.edn$" . clojure-mode)
           ("\\.cljs$" . clojure-mode)
           ("\\.cljx$" . clojure-mode))
    :init
    (progn
      (eval-after-load "clojure-mode"
        '(define-clojure-indent
           ;; COMPOJURE
           (ANY 2)
           (DELETE 2)
           (GET 2)
           (HEAD 2)
           (POST 2)
           (PUT 2)
           (context 2)
           ;; ALGO.MONADS
           (domonad 1)
           ;; SQLINGVO
           (copy 2)
           (create-table 1)
           (delete 1)
           (drop-table 1)
           (insert 2)
           (select 1)
           (select! 2)
           (truncate 1)
           (update 2)
           ;; CUSTOM
           (api-test 1)
           (web-test 1)
           (database-test 1)
           (defroutes 'defun)
           ))

      ;; More flexible clojure-test-mode regex.
      (eval-after-load "clojure-test-mode"
        '(setq clojure-test-regex
               (mapconcat
                'identity
                '("\\(clojure\\.test\\)"
                  "\\((ns .*-test.*\\)")
                "\\|")))))
#+END_SRC
** Clojure refactor
#+BEGIN_SRC emacs-lisp
  (use-package clj-refactor
    :init
    (progn
      (defun enable-clj-refactor-mode ()
        (clj-refactor-mode 1))

      (add-hook 'clojure-mode-hook 'enable-clj-refactor-mode)
      (cljr-add-keybindings-with-prefix "C-c C-x")))

#+END_SRC
** Dired mode

   Switches passed to `ls' for Dired. MUST contain the `l' option.

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
#+END_SRC

   Try to guess a default target directory.

#+BEGIN_SRC emacs-lisp
  (setq dired-dwim-target t)
#+END_SRC

   Find Clojure files in dired mode.

#+BEGIN_SRC emacs-lisp
  (defun find-dired-clojure (dir)
    "Run find-dired on Clojure files."
    (interactive (list (read-directory-name "Run find (Clojure) in directory: " nil "" t)))
    (find-dired dir "-name \"*.clj\""))
#+END_SRC

   Find Ruby files in dired mode.

#+BEGIN_SRC emacs-lisp
  (defun find-dired-ruby (dir)
    "Run find-dired on Ruby files."
    (interactive (list (read-directory-name "Run find (Ruby) in directory: " nil "" t)))
    (find-dired dir "-name \"*.rb\""))
#+END_SRC

** Dired-x mode

   User-defined alist of rules for suggested commands.

#+BEGIN_SRC emacs-lisp
  (setq dired-guess-shell-alist-user
        '(("\\.pdf$" "evince")
          ("\\.xlsx?$" "libreoffice")))
#+END_SRC

   Run shell command in background.

#+BEGIN_SRC emacs-lisp
  (defun dired-do-shell-command-in-background (command)
    "In dired, do shell command in background on the file or directory named on
   this line."
    (interactive
     (list (dired-read-shell-command (concat "& on " "%s: ") nil (list (dired-get-filename)))))
    (call-process command nil 0 nil (dired-get-filename)))

  (add-hook 'dired-load-hook
            (lambda ()
              (load "dired-x")
              (define-key dired-mode-map "&" 'dired-do-shell-command-in-background)))
#+END_SRC

** Electric pair mode

   Electric Pair mode, a global minor mode, provides a way to easily
   insert matching delimiters. Whenever you insert an opening
   delimiter, the matching closing delimiter is automatically inserted
   as well, leaving point between the two.

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode t)
#+END_SRC
** Emacs Lisp mode

   Unequivocally turn on ElDoc mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

   Enable Slime-style navigation of elisp symbols using M-. and M-,

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'elisp-slime-nav-mode)
#+END_SRC

   Auto load files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("Cask" . emacs-lisp-mode))
#+END_SRC

   Key bindings.

#+BEGIN_SRC emacs-lisp
  (let ((mode emacs-lisp-mode-map))
    (define-key mode (kbd "C-c m") 'macrostep-expand)
    (define-key mode (kbd "C-c e E") 'elint-current-buffer)
    (define-key mode (kbd "C-c e c") 'cancel-debug-on-entry)
    (define-key mode (kbd "C-c e d") 'debug-on-entry)
    (define-key mode (kbd "C-c e e") 'toggle-debug-on-error)
    (define-key mode (kbd "C-c e f") 'emacs-lisp-byte-compile-and-load)
    (define-key mode (kbd "C-c e l") 'find-library)
    (define-key mode (kbd "C-c e r") 'eval-region)
    (define-key mode (kbd "C-c C-k") 'eval-buffer)
    (define-key mode (kbd "C-c ,") 'ert)
    (define-key mode (kbd "C-c C-,") 'ert))
#+END_SRC

** Elisp slime navigation
#+BEGIN_SRC emacs-lisp
  (use-package elisp-slime-nav)
#+END_SRC
** Emacs server

   Start the Emacs server if it's not running.

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p) (server-start))
#+END_SRC

** Emacs multimedia system
#+BEGIN_SRC emacs-lisp
  (use-package emms
    :init
    (progn
      (emms-all)
      (emms-default-players)

      (add-to-list 'emms-player-list 'emms-player-mpd)
      (condition-case nil
          (emms-player-mpd-connect)
        (error (message "Can't connect to music player daemon.")))

      (setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
      (setq emms-player-mpd-music-directory (expand-file-name "~/Music"))

      (let ((filename "~/.emms.el"))
        (when (file-exists-p filename)
          (load-file filename)))

      (add-to-list 'emms-stream-default-list
                   '("SomaFM: Space Station" "http://www.somafm.com/spacestation.pls" 1 streamlist))))
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind (("C-c C-+" . er/expand-region)
           ("C-c C--" . er/contract-region)))
#+END_SRC
** Fly Spell mode

   Enable flyspell in text mode.

#+BEGIN_SRC emacs-lisp

  (defun enable-flyspell-mode ()
    "Enable Flyspell mode."
    (flyspell-mode 1))

  (dolist (hook '(text-mode-hook))
    (add-hook hook 'enable-flyspell-mode))

#+END_SRC

   Enable flyspell in programming mode.

#+BEGIN_SRC emacs-lisp

  (defun enable-flyspell-prog-mode ()
    "Enable Flyspell Programming mode."
    (flyspell-prog-mode))

  (dolist (hook '(prog-mode-hook))
    (add-hook hook 'enable-flyspell-prog-mode))

#+END_SRC

** Gnus
#+BEGIN_SRC emacs-lisp
  (setq gnus-init-file "~/.emacs.d/gnus.el")
#+END_SRC
** Ido mode

#+BEGIN_SRC emacs-lisp
  (setq ido-auto-merge-work-directories-length nil)
#+END_SRC

   Always create new buffer if no buffer matches substring.

#+BEGIN_SRC emacs-lisp
  (setq ido-create-new-buffer 'always)
#+END_SRC

   Enable flexible string matching.

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-prefix nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-handle-duplicate-virtual-buffers 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-max-prospects 10)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-use-filename-at-point 'guess)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq ido-use-virtual-buffers t)
#+END_SRC

   Use ido everywhere

#+BEGIN_SRC emacs-lisp
  (setq ido-everywhere t)
#+END_SRC

   Enable IDO mode.

#+BEGIN_SRC emacs-lisp
  (ido-mode t)
#+END_SRC

** Ido vertical mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :init (ido-vertical-mode))
#+END_SRC
** Flx mode
#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :init
    (progn
      (flx-ido-mode 1)
      ;; disable ido faces to see flx highlights.
      (setq ido-use-faces nil)
      (setq gc-cons-threshold 20000000)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x C-g s" . magit-status))
    :init (progn
            (setq magit-stage-all-confirm nil)
            (setq magit-unstage-all-confirm nil)
            (setq ediff-window-setup-function 'ediff-setup-windows-plain)))
#+END_SRC
** Java

   Indent Java annotations. See http://lists.gnu.org/archive/html/help-gnu-emacs/2011-04/msg00262.html

#+BEGIN_SRC emacs-lisp
  (add-hook
   'java-mode-hook
   '(lambda ()
      (setq c-comment-start-regexp "\\(@\\|/\\(/\\|[*][*]?\\)\\)")
      (modify-syntax-entry ?@ "< b" java-mode-syntax-table)))
#+END_SRC

** Octave

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.m$" . octave-mode))
  (add-hook 'octave-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (auto-fill-mode 1)
              (if (eq window-system 'x)
                  (font-lock-mode 1))))
#+END_SRC

** IRC
#+BEGIN_SRC emacs-lisp
  (if (file-exists-p "~/.rcirc.el") (load-file "~/.rcirc.el"))

  (setq rcirc-default-nick "r0man"
        rcirc-default-user-name "r0man"
        rcirc-default-full-name "Roman Scherer"
        rcirc-server-alist '(("irc.freenode.net" :channels ("#clojure")))
        rcirc-private-chat t
        rcirc-debug-flag t)

  (add-hook 'rcirc-mode-hook
            (lambda ()
              (set (make-local-variable 'scroll-conservatively) 8192)
              (rcirc-track-minor-mode 1)
              (flyspell-mode 1)))
#+END_SRC

** Mail

   Load smtpmail

#+BEGIN_SRC emacs-lisp
  (require 'smtpmail)
#+END_SRC

   Send mail via smtpmail.

#+BEGIN_SRC emacs-lisp
  (setq send-mail-function 'sendmail-send-it)
#+END_SRC

   Whether to print info in debug buffer.

#+BEGIN_SRC emacs-lisp
  (setq smtpmail-debug-info t)
#+END_SRC

   The name of the host running SMTP server.

#+BEGIN_SRC emacs-lisp
  (setq smtpmail-smtp-server "smtp.googlemail.com")
#+END_SRC

   SMTP service port number.

#+BEGIN_SRC emacs-lisp
  (setq smtpmail-smtp-service 465)
#+END_SRC

** Macrostep
#+BEGIN_SRC emacs-lisp
  (use-package macrostep)
#+END_SRC
** Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
** Multi term

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :bind (("C-x M" . multi-term)
           ("C-x m" . switch-to-term-mode-buffer))
    :init
    (progn
      ;; (setq multi-term-dedicated-select-after-open-p t
      ;;       multi-term-dedicated-window-height 25
      ;;       multi-term-program "/bin/bash")

      ;; ;; Enable compilation-shell-minor-mode in multi term.
      ;; ;; http://www.masteringemacs.org/articles/2012/05/29/compiling-running-scripts-emacs/

      ;; ;; TODO: WTF? Turns off colors in terminal.
      ;; ;; (add-hook 'term-mode-hook 'compilation-shell-minor-mode)

      (add-hook 'term-mode-hook
                (lambda ()
                  (dolist
                      (bind '(("<S-down>" . multi-term)
                              ("<S-left>" . multi-term-prev)
                              ("<S-right>" . multi-term-next)
                              ("C-<backspace>" . term-send-backward-kill-word)
                              ("C-<delete>" . term-send-forward-kill-word)
                              ("C-<left>" . term-send-backward-word)
                              ("C-<right>" . term-send-forward-word)
                              ("C-c C-j" . term-line-mode)
                              ("C-c C-k" . term-char-mode)
                              ("C-v" . scroll-up)
                              ("C-y" . term-paste)
                              ("C-z" . term-stop-subjob)
                              ("M-DEL" . term-send-backward-kill-word)
                              ("M-d" . term-send-forward-kill-word)))
                    (add-to-list 'term-bind-key-alist bind))))))
#+END_SRC

   Returns the most recently used term-mode buffer.

#+BEGIN_SRC emacs-lisp
  (defun last-term-mode-buffer (list-of-buffers)
    "Returns the most recently used term-mode buffer."
    (when list-of-buffers
      (if (eq 'term-mode (with-current-buffer (car list-of-buffers) major-mode))
          (car list-of-buffers) (last-term-mode-buffer (cdr list-of-buffers)))))
#+END_SRC

   Switch to the most recently used term-mode buffer, or create a new one.

#+BEGIN_SRC emacs-lisp
  (defun switch-to-term-mode-buffer ()
    "Switch to the most recently used term-mode buffer, or create a
  new one."
    (interactive)
    (let ((buffer (last-term-mode-buffer (buffer-list))))
      (if (not buffer)
          (multi-term)
        (switch-to-buffer buffer))))
#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors)
#+END_SRC
** Fuck the NSA

   http://www.gnu.org/software/emacs/manual/html_node/emacs/Mail-Amusements.html

#+BEGIN_SRC emacs-lisp
  (setq mail-signature
        '(progn
           (goto-char (point-max))
           (insert "\n\n--------------------------------------------------------------------------------")
           (spook)))
#+END_SRC
** Save hist mode

   Save the mini buffer history.

#+BEGIN_SRC emacs-lisp
  (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
#+END_SRC

** SQL mode
#+BEGIN_SRC emacs-lisp
  (setq sql-indent-offset 2)
  (eval-after-load "sql"
    '(progn
       (let ((filename "~/.sql.el"))
         (when (file-exists-p filename)
           (load-file filename)))))
#+END_SRC

** Tramp
#+BEGIN_SRC emacs-lisp
  (eval-after-load "tramp"
    '(progn
       (tramp-set-completion-function
        "ssh"
        '((tramp-parse-shosts "~/.ssh/known_hosts")
          (tramp-parse-hosts "/etc/hosts")))))
#+END_SRC

** Uniquify
#+BEGIN_SRC emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-separator "|")
  (setq uniquify-ignore-buffers-re "^\\*")
  (setq uniquify-after-kill-buffer-p t)
#+END_SRC

** Org mode

   Configure active languages for Babel.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (clojure . t)
     (emacs-lisp . t)
     (ruby . t)
     (sh . t)
     (sql . t)))
#+END_SRC

   Fontify org mode code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

** Paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :init (dolist (mode '(scheme emacs-lisp lisp clojure clojurescript))
            (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
                      'paredit-mode)))
#+END_SRC
** Pretty lambda
#+BEGIN_SRC emacs-lisp
  (use-package pretty-lambdada
    :init (pretty-lambda-for-modes))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init (projectile-global-mode))
#+END_SRC
** Popwin
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :init
    (progn
      (setq display-buffer-function 'popwin:display-buffer)
      (setq popwin:special-display-config
            '(("*Help*"  :height 30)
              ("*Completions*" :noselect t)
              ("*Messages*" :noselect t :height 30)
              ("*Apropos*" :noselect t :height 30)
              ("*Backtrace*" :height 30)
              ("*Messages*" :height 30)
              ("*Occur*" :noselect t)
              ("*Ido Completions*" :noselect t :height 30)
              ("*magit-commit*" :noselect t :height 40 :width 80 :stick t)
              ("*magit-diff*" :noselect t :height 40 :width 80)
              ("*magit-edit-log*" :noselect t :height 15 :width 80)
              ("\\*ansi-term\\*.*" :regexp t :height 30)
              ("*shell*" :height 30)
              (".*overtone.log" :regexp t :height 30)
              ("*gists*" :height 30)
              ("*sldb.*":regexp t :height 30)
              ("*Kill Ring*" :height 30)
              ("*Compile-Log*" :height 30 :stick t)
              ("*git-gutter:diff*" :height 30 :stick t)))))
#+END_SRC
** Ruby mode
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode
    :mode (("Capfile$" . ruby-mode)
           ("Gemfile$" . ruby-mode)
           ("Guardfile$" . ruby-mode)
           ("Rakefile$" . ruby-mode)
           ("Vagrantfile$" . ruby-mode)
           ("\\.gemspec$" . ruby-mode)
           ("\\.rake$" . ruby-mode)
           ("\\.ru$" . ruby-mode)))

#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :bind (("M-X" . smex-major-mode-commands)
           ("M-x" . smex)))
#+END_SRC
** Slamhound
#+BEGIN_SRC emacs-lisp
  (use-package slamhound)
#+END_SRC
** Smooth scrolling
#+BEGIN_SRC emacs-lisp
  (use-package smooth-scrolling)
#+END_SRC
** Web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode "\\.html\\'")
#+END_SRC
** Winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode)
#+END_SRC

** After init hook
#+BEGIN_SRC emacs-lisp

  (add-hook
   'after-init-hook
   (lambda ()

     ;; Load system specific config.
     (let ((system-config (concat user-emacs-directory system-name ".el")))
       (when (file-exists-p system-config)
         (load system-config)))

     ;; Start a terminal.
     (multi-term)

     ;; Load keyboard bindings.
     (global-set-key (kbd "C-c ,") 'ruby-test-run)
     (global-set-key (kbd "C-c C-.") 'clojure-test-run-test)
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
     (global-set-key (kbd "C-c M-,") 'ruby-test-run-at-point)
     (global-set-key (kbd "C-c n") 'cleanup-buffer)
     (global-set-key (kbd "C-x C-g b") 'mo-git-blame-current)
     (global-set-key (kbd "C-x C-d") 'dired)
     (global-set-key (kbd "C-x C-o") 'delete-blank-lines)
     (global-set-key (kbd "C-x TAB") 'indent-rigidly)
     (global-set-key (kbd "C-x ^") 'enlarge-window)
     (global-set-key (kbd "C-x C-f") 'projectile-find-file)
     (global-set-key (kbd "C-x f") 'ido-find-file)
     (global-set-key (kbd "C-x h") 'mark-whole-buffer)
     (global-set-key (kbd "C-c r") 'rotate-buffers)

     (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
     (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)))
#+END_SRC
